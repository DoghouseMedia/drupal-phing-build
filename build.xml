<?xml version="1.0" encoding="UTF-8"?>

<project name="buildbase" default="help">

  <!-- ///////////////////////////////////////////////////////////////////// -->
  <!-- # Imports                                                             -->
  <!-- ///////////////////////////////////////////////////////////////////// -->

  <import file="vendor/doghouseagency/phing-drush/build.xml" optional="true" />
  <import file="vendor/doghouseagency/phing-drush/build.cache.xml" optional="true" />
  <import file="vendor/doghouseagency/phing-drush/build.cron.xml" optional="true" />
  <import file="vendor/doghouseagency/phing-drush/build.database.xml" optional="true" />
  <import file="vendor/doghouseagency/phing-drush/build.download.xml" optional="true" />
  <import file="vendor/doghouseagency/phing-drush/build.features.xml" optional="true" />
  <import file="vendor/doghouseagency/phing-drush/build.files.xml" optional="true" />
  <import file="vendor/doghouseagency/phing-drush/build.install.xml" optional="true" />
  <import file="vendor/doghouseagency/phing-drush/build.maintenance.xml" optional="true" />
  <import file="vendor/doghouseagency/phing-drush/build.user.xml" optional="true" />
  <import file="vendor/doghouseagency/phing-drush/build.watchdog.xml" optional="true" />
  <import file="vendor/doghouseagency/phing-phpcs/build.xml" optional="true" />

  <!-- ///////////////////////////////////////////////////////////////////// -->
  <!-- # Properties                                                          -->
  <!-- ///////////////////////////////////////////////////////////////////// -->

  <copy file="${phing.dir.buildbase}/build.default.properties" tofile="build.properties" overwrite="true" />

  <if>
    <not><equals arg1="${phing.dir}" arg2="${phing.dir.buildbase}" /></not>
    <then>
      <append file="${project.basedir}/build.default.properties" destFile="build.properties" />
      <append file="${project.basedir}/build.local.properties" destFile="build.properties" />
    </then>
  </if>

  <if>
    <isset property="site" />
    <then>
      <append file="${project.basedir}/build.${site}.properties" destFile="build.properties" />
      <append file="${project.basedir}/build.${site}.local.properties" destFile="build.properties" />
    </then>
  </if>

  <property file="build.properties" override="true" />

  <!-- ///////////////////////////////////////////////////////////////////// -->
  <!-- # Main targets                                                        -->
  <!-- ///////////////////////////////////////////////////////////////////// -->

  <!-- ## Base targets -->

  <target name="help"
          description="Lists available targets in this project.">
    <exec command="${phing.home}/bin/phing -l" passthru="true" checkreturn="true" />
  </target>

  <target name="init"
          description="Initialises and prepares the project for a new build."
          depends="prepare:deps, prepare:env, prepare:wd, prepare:db" />

  <target name="init:ci"
          description="Initialises and prepares the project for a new build for the CI server."
          depends="prepare:deps, prepare:env, prepare:wd" />

  <target name="build"
          description="Performs a complete build of the project."
          depends="init, clean, compile, verify, analyse" />

  <target name="build:ci"
          description="Performs a complete build of the project for the CI server."
          depends="init:ci, clean:ci, compile, verify, analyse:ci" />

  <target name="compile"
          description="Ensures the code is compiled and ready to go."
          depends="prepare:wd" />

  <target name="verify"
          description="Checks whether the code is clean and functional."
          depends="prepare:wd" />

  <target name="analyse"
          description="Checks whether the code complies with coding standards and best practices."
          depends="prepare:wd, phpcs:check" />

  <target name="analyse:ci"
          description="Checks whether the code complies with coding standards and best practices for the CI server."
          depends="prepare:wd, phpcs:check:ci" />

  <target name="clean"
          description="Cleans up the project entirely."
          depends="clean:wd, clean:db" />

  <target name="clean:ci"
          description="Cleans up the project for the CI server."
          depends="clean:wd" />

  <!-- ## Preparation targets -->

  <target name="prepare:deps"
          description="Prepares dependencies for a new build."
          depends="git-submodule:config"
          unless="build.deps.prepared">
    <property name="build.deps.prepared" value="true" />
  </target>

  <target name="prepare:env"
          description="Prepares the environment for a new build."
          depends=" npm:config"
          unless="build.env.prepared">
    <property name="build.env.prepared" value="true" />
  </target>

  <target name="prepare:wd"
          description="Prepares the working directory for a new build."
          depends="clean:wd, drush:config"
          unless="build.wd.prepared">
    <property name="build.wd.prepared" value="true" />
  </target>

  <target name="prepare:db"
          description="Prepares the database for a new build."
          depends="clean:db, drush-database:create, drush-database:sync, drush-database:update, drush-features:import, drush-user:logout-all, drush-watchdog:clear, drush-maintenance:off, drush-cache:rebuild"
          unless="build.db.prepared">
    <property name="build.db.prepared" value="true" />
  </target>

  <!-- ## Cleanup targets -->

  <target name="clean:wd"
          description="Deletes old artifacts from the working directory."
          unless="build.wd.cleaned">
    <delete dir="${build.logs.dir}" />
    <mkdir dir="${build.logs.dir}" />
    <property name="build.wd.cleaned" value="true" />
  </target>

  <target name="clean:db"
          description="Deletes old tables from the database."
          depends="drush-database:drop"
          unless="build.db.cleaned">
    <property name="build.db.cleaned" value="true" />
  </target>

  <!-- ///////////////////////////////////////////////////////////////////// -->
  <!-- # Helper targets                                                      -->
  <!-- ///////////////////////////////////////////////////////////////////// -->

  <!-- ## Git targets -->

  <target name="git-submodule:config"
          description="Configures Git submodules for the project.">
    <exec command="git submodule update --init --recursive" passthru="true" checkreturn="true" />
  </target>

  <!-- ## Grunt targets -->

  <!-- ## Removed rb-env target regarding JIRA DIP-47 avoid ruby in build -->


  <!-- ## npm targets -->

  <target name="npm:config"
          description="Configures npm packages for the project.">
    <exec command="npm install" passthru="true" checkreturn="true" />
    <!-- ## npm command which builds the assets -->
    <exec command="npm run build" passthru="true" checkreturn="true" />
  </target>



</project>
